# Menus
menu(asynTMOD) {
    choice(asynTMOD_Write_Read,"Write/Read")
    choice(asynTMOD_Write,"Write")
    choice(asynTMOD_Read,"Read")
    choice(asynTMOD_Flush,"Flush")
    choice(asynTMOD_NoIO,"NoI/O")
}
menu(asynINTERFACE) {
    choice(asynINTERFACE_OCTET,"asynOctet")
    choice(asynINTERFACE_INT32,"asynInt32")
    choice(asynINTERFACE_UINT32,"asynUInt32Digital")
    choice(asynINTERFACE_FLOAT64,"asynFloat64")
}
menu(asynFMT) {
    choice(asynFMT_ASCII,"ASCII")
    choice(asynFMT_Hybrid,"Hybrid")
    choice(asynFMT_Binary,"Binary")
}
menu(asynTRACE) {
    choice(asynTRACE_Off,"Off")
    choice(asynTRACE_On,"On")
}
menu(asynAUTOCONNECT) {
    choice(asynAUTOCONNECT_noAutoConnect,"noAutoConnect")
    choice(asynAUTOCONNECT_autoConnect,"autoConnect")
}
menu(asynCONNECT) {
    choice(asynCONNECT_Disconnect,"Disconnect")
    choice(asynCONNECT_Connect,"Connect")
}
menu(asynENABLE) {
    choice(asynENABLE_Disable,"Disable")
    choice(asynENABLE_Enable,"Enable")
}
menu(asynEOMREASON) {
    choice(asynEOMREASONNone,"None")
    choice(asynEOMREASONCNT,"Count")
    choice(asynEOMREASONEOS,"Eos")
    choice(asynEOMREASONCNTEOS,"Count Eos")
    choice(asynEOMREASONEND,"End")
    choice(asynEOMREASONCNTEND,"Count End")
    choice(asynEOMREASONEOSEND,"Eos End")
    choice(asynEOMREASONCNTEOSEND,"Count Eos End")
}
menu(serialBAUD) {
    choice(serialBAUD_unknown,"Unknown")
    choice(serialBAUD_300,"300")
    choice(serialBAUD_600,"600")
    choice(serialBAUD_1200,"1200")
    choice(serialBAUD_2400,"2400")
    choice(serialBAUD_4800,"4800")
    choice(serialBAUD_9600,"9600")
    choice(serialBAUD_19200,"19200")
    choice(serialBAUD_38400,"38400")
    choice(serialBAUD_57600,"57600")
    choice(serialBAUD_115200,"115200")
    choice(serialBAUD_230400,"230400")
    choice(serialBAUD_460800,"460800")
    choice(serialBAUD_576000,"576000")
    choice(serialBAUD_921600,"921600")
    choice(serialBAUD_1152000,"1152000")
}
menu(serialPRTY) {
    choice(serialPRTY_unknown,"Unknown")
    choice(serialPRTY_None,"None")
    choice(serialPRTY_Even,"Even")
    choice(serialPRTY_Odd,"Odd")
}
menu(serialDBIT) {
    choice(serialDBIT_unknown,"Unknown")
    choice(serialDBIT_5,"5")
    choice(serialDBIT_6,"6")
    choice(serialDBIT_7,"7")
    choice(serialDBIT_8,"8")
}
menu(serialSBIT) {
    choice(serialSBIT_unknown,"Unknown")
    choice(serialSBIT_1,"1")
    choice(serialSBIT_2,"2")
}
menu(serialMCTL) {
    choice(serialMCTL_unknown,"Unknown")
    choice(serialMCTL_CLOCAL,"CLOCAL")
    choice(serialMCTL_Yes,"YES")
}
menu(serialFCTL) {
    choice(serialFCTL_unknown,"Unknown")
    choice(serialFCTL_None,"None")
    choice(serialFCTL_Hardware,"Hardware")
}
menu(serialIX) {
    choice(serialIX_unknown,"Unknown")
    choice(serialIX_No,"No")
    choice(serialIX_Yes,"Yes")
}
menu(ipDRTO) {
    choice(ipDRTO_unknown,"Unknown")
    choice(ipDRTO_No,"No")
    choice(ipDRTO_Yes,"Yes")
}
menu(gpibUCMD) {
    choice(gpibUCMD_None,"None")
    choice(gpibUCMD_Device_Clear__DCL_,"Device Clear (DCL)")
    choice(gpibUCMD_Local_Lockout__LL0_,"Local Lockout (LL0)")
    choice(gpibUCMD_Serial_Poll_Disable__SPD_,"Serial Poll Disable (SPD)")
    choice(gpibUCMD_Serial_Poll_Enable__SPE_,"Serial Poll Enable (SPE)")
    choice(gpibUCMD_Unlisten__UNL_,"Unlisten (UNL)")
    choice(gpibUCMD_Untalk__UNT_,"Untalk (UNT)")
}
menu(gpibACMD) {
    choice(gpibACMD_None,"None")
    choice(gpibACMD_Group_Execute_Trig___GET_,"Group Execute Trig. (GET)")
    choice(gpibACMD_Go_To_Local__GTL_,"Go To Local (GTL)")
    choice(gpibACMD_Selected_Dev__Clear__SDC_,"Selected Dev. Clear (SDC)")
    choice(gpibACMD_Take_Control__TCT_,"Take Control (TCT)")
    choice(gpibACMD_Serial_Poll,"Serial Poll")
}

recordtype(asyn) {
    include "dbCommon.dbd" 
    field(VAL,DBF_LONG) {
        prompt("Value field (unused)")
        asl(ASL0)
        interest(4)
    }

# Address fields
    field(PORT,DBF_STRING) {
        prompt("asyn port")
        promptgroup(GUI_INPUTS)
        special(SPC_MOD)
        interest(1)
        initial("")
        size(40)
    }
    field(ADDR,DBF_LONG) {
        prompt("asyn address")
        promptgroup(GUI_INPUTS)
        special(SPC_MOD)
        interest(1)
        initial("0")
    }
    field(PCNCT,DBF_MENU) {
        prompt("Port Connect/Disconnect")
        special(SPC_MOD)
        interest(2)
        menu(asynCONNECT)
    }
    field(DRVINFO,DBF_STRING) {
        prompt("Driver info string")
        promptgroup(GUI_INPUTS)
        special(SPC_MOD)
        interest(2)
        initial("")
        size(40)
    }
    field(REASON,DBF_LONG) {
        prompt("asynUser->reason")
        interest(2)
        special(SPC_MOD)
    }

# Input/output control fields
    field(TMOD,DBF_MENU) {
        prompt("Transaction mode")
        promptgroup(GUI_INPUTS)
        interest(1)
        menu(asynTMOD)
    }
    field(TMOT,DBF_DOUBLE) {
        prompt("Timeout (sec)")
        promptgroup(GUI_INPUTS)
        interest(1)
        initial("1.0")
    }
    field(IFACE,DBF_MENU) {
        prompt("Interface")
        promptgroup(GUI_INPUTS)
        special(SPC_MOD)
        interest(2)
        menu(asynINTERFACE)
    }
    field(OCTETIV, DBF_LONG) {
        prompt("asynOctet is valid")
        interest(2)
    }
    field(OPTIONIV, DBF_LONG) {
        prompt("asynOption is valid")
        interest(2)
    }
    field(GPIBIV, DBF_LONG) {
        prompt("asynGPIB is valid")
        interest(2)
    }
    field(I32IV, DBF_LONG) {
        prompt("asynInt32 is valid")
        interest(2)
    }
    field(UI32IV, DBF_LONG) {
        prompt("asynUInt32Digital is valid")
        interest(2)
    }
    field(F64IV, DBF_LONG) {
        prompt("asynFloat64 is valid")
        interest(2)
    }

# asynOctet output control fields
    field(AOUT,DBF_STRING) {
        prompt("Output (command) string")
        promptgroup(GUI_OUTPUT)
        interest(1)
        pp(TRUE)
        size(40)
    }
    field(OEOS,DBF_STRING) {
        prompt("Output delimiter")
        promptgroup(GUI_OUTPUT)
        interest(1)
        special(SPC_MOD)
        size(40)
    }
    field(BOUT,DBF_CHAR) {
        prompt("Output binary data")
        interest(1)
        special(SPC_DBADDR)
        pp(TRUE)
    }
    field(OPTR,DBF_NOACCESS) {
        prompt("Output buffer pointer")
        special(SPC_NOMOD)
        interest(4)
        extra("void *optr")
    }
    field(OMAX,DBF_LONG) {
        prompt("Max. size of output array")
        promptgroup(GUI_OUTPUT)
        special(SPC_NOMOD)
        interest(1)
        initial("80")
    }
    field(NOWT,DBF_LONG) {
        prompt("Number of bytes to write")
        promptgroup(GUI_OUTPUT)
        interest(1)
        initial("80")
    }
    field(NAWT,DBF_LONG) {
        prompt("Number of bytes actually written")
        interest(1)
    }
    field(OFMT,DBF_MENU) {
        prompt("Output format")
        promptgroup(GUI_OUTPUT)
        interest(1)
        menu(asynFMT)
    }

# asynOctet input control fields
    field(AINP,DBF_STRING) {
        prompt("Input (response) string")
        interest(1)
        special(SPC_NOMOD)
        size(40)
    }
    field(TINP,DBF_STRING) {
        prompt("Translated input string")
        asl(ASL0)
        interest(1)
        special(SPC_NOMOD)
        size(40)
    }
    field(IEOS,DBF_STRING) {
        prompt("Input Delimiter")
        promptgroup(GUI_INPUTS)
        interest(1)
        special(SPC_MOD)
        size(40)
    }
    field(BINP,DBF_CHAR) {
        prompt("Input binary data")
        asl(ASL0)
        special(SPC_DBADDR)
    }
    field(IPTR,DBF_NOACCESS) {
        prompt("Input buffer pointer")
        special(SPC_NOMOD)
        interest(4)
        size(4)
        extra("void *iptr")
    }
    field(IMAX,DBF_LONG) {
        prompt("Max. size of input array")
        promptgroup(GUI_INPUTS)
        special(SPC_NOMOD)
        interest(1)
        initial("80")
    }
    field(NRRD,DBF_LONG) {
        prompt("Number of bytes to read")
        promptgroup(GUI_INPUTS)
        interest(1)
    }
    field(NORD,DBF_LONG) {
        prompt("Number of bytes read")
        special(SPC_NOMOD)
        interest(1)
    }
    field(IFMT,DBF_MENU) {
        prompt("Input format")
        promptgroup(GUI_INPUTS)
        interest(1)
        menu(asynFMT)
    }
    field(EOMR,DBF_MENU) {
        prompt("EOM reason")
        special(SPC_NOMOD)
        interest(1)
        menu(asynEOMREASON)
    }

# asynInt32, asynUInt32Digital, and asynFloat64 data fields
    field(I32INP,DBF_LONG) {
        prompt("asynInt32 input")
        special(SPC_NOMOD)
        interest(2)
    }
    field(I32OUT,DBF_LONG) {
        prompt("asynInt32 output")
        promptgroup(GUI_OUTPUT)
        interest(2)
        pp(TRUE)
    }
    field(UI32INP,DBF_ULONG) {
        prompt("asynUInt32Digital input")
        special(SPC_NOMOD)
        interest(2)
    }
    field(UI32OUT,DBF_ULONG) {
        prompt("asynUInt32Digital output")
        promptgroup(GUI_OUTPUT)
        interest(2)
        pp(TRUE)
    }
    field(UI32MASK,DBF_ULONG) {
        prompt("asynUInt32Digital mask")
        promptgroup(GUI_OUTPUT)
        initial("0xffffffff")
        special(SPC_MOD)
        interest(2)
    }
    field(F64INP,DBF_DOUBLE) {
        prompt("asynFloat64 input")
        special(SPC_NOMOD)
        interest(2)
    }
    field(F64OUT,DBF_DOUBLE) {
        prompt("asynFloat64 output")
        promptgroup(GUI_OUTPUT)
        interest(2)
        pp(TRUE)
    }

# Serial control fields
    field(BAUD,DBF_MENU) {
        prompt("Baud rate")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialBAUD)
    }
    field(LBAUD,DBF_LONG) {
        prompt("Baud rate")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
    }
    field(PRTY,DBF_MENU) {
        prompt("Parity")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialPRTY)
    }
    field(DBIT,DBF_MENU) {
        prompt("Data bits")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialDBIT)
    }
    field(SBIT,DBF_MENU) {
        prompt("Stop bits")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialSBIT)
    }
    field(MCTL,DBF_MENU) {
        prompt("Modem control")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialMCTL)
    }
    field(FCTL,DBF_MENU) {
        prompt("Flow control")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialFCTL)
    }
    field(IXON,DBF_MENU) {
        prompt("Output XON/XOFF")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialIX)
    }
    field(IXOFF,DBF_MENU) {
        prompt("Input XON/XOFF")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialIX)
    }
    field(IXANY,DBF_MENU) {
        prompt("XON=any character")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(serialIX)
    }

# IP option fields
    field(HOSTINFO,DBF_STRING) {
        prompt("host info")
        promptgroup(GUI_INPUTS)
        special(SPC_MOD)
        interest(1)
        initial("")
        size(40)
    }
    field(DRTO,DBF_MENU) {
        prompt("Disconnect on timeout")
        promptgroup(GUI_INPUTS)
        interest(2)
        special(SPC_MOD)
        menu(ipDRTO)
    }

# GPIB control fields
    field(UCMD,DBF_MENU) {
        prompt("Universal command")
        promptgroup(GUI_OUTPUT)
        pp(TRUE)
        interest(2)
        menu(gpibUCMD)
    }
    field(ACMD,DBF_MENU) {
        prompt("Addressed command")
        promptgroup(GUI_OUTPUT)
        pp(TRUE)
        interest(2)
        menu(gpibACMD)
    }
    field(SPR,DBF_UCHAR) {
        prompt("Serial poll response")
        interest(2)
        special(SPC_NOMOD)
    }

# Trace control fields
    field(TMSK,DBF_LONG) {
        prompt("Trace mask")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
    }
    field(TB0,DBF_MENU) {
        prompt("Trace error")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TB1,DBF_MENU) {
        prompt("Trace IO device")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TB2,DBF_MENU) {
        prompt("Trace IO filter")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TB3,DBF_MENU) {
        prompt("Trace IO driver")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TB4,DBF_MENU) {
        prompt("Trace flow")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TB5,DBF_MENU) {
        prompt("Trace warning")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TIOM,DBF_LONG) {
        prompt("Trace I/O mask")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
    }
    field(TIB0,DBF_MENU) {
        prompt("Trace IO ASCII")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TIB1,DBF_MENU) {
        prompt("Trace IO escape")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TIB2,DBF_MENU) {
        prompt("Trace IO hex")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TINM,DBF_LONG) {
        prompt("Trace Info mask")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
    }
    field(TINB0,DBF_MENU) {
        prompt("Trace Info Time")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TINB1,DBF_MENU) {
        prompt("Trace Info Port")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TINB2,DBF_MENU) {
        prompt("Trace Info Source")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TINB3,DBF_MENU) {
        prompt("Trace Info Thread")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        menu(asynTRACE)
    }
    field(TSIZ,DBF_LONG) {
        prompt("Trace IO truncate size")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
    }
    field(TFIL,DBF_STRING) {
        prompt("Trace IO file")
        promptgroup(GUI_DISPLAY)
        special(SPC_MOD)
        interest(1)
        size(40)
    }

# Connection management fields
    field(AUCT,DBF_MENU) {
        prompt("Autoconnect")
        promptgroup(GUI_INPUTS)
        special(SPC_MOD)
        interest(1)
        menu(asynAUTOCONNECT)
    }
    field(CNCT,DBF_MENU) {
        prompt("Connect/Disconnect")
        promptgroup(GUI_INPUTS)
        special(SPC_MOD)
        interest(1)
        menu(asynCONNECT)
    }
    field(ENBL,DBF_MENU) {
        prompt("Enable/Disable")
        promptgroup(GUI_INPUTS)
        special(SPC_MOD)
        interest(1)
        menu(asynENABLE)
    }

# Miscellaneous fields
    field(ERRS,DBF_NOACCESS) {
        prompt("Error string")
        special(SPC_DBADDR)
        interest(4)
        extra("char *errs")
    }
    field(AQR,DBF_UCHAR) {
        prompt("Abort queueRequest")
        special(SPC_MOD)
        interest(4)
    }
}
