# .travis.yml for use with EPICS Base ci-scripts
# (see: https://github.com/epics-base/ci-scripts)

# This is YAML - indentation levels are crucial

language: cpp
compiler: gcc
dist: xenial

cache:
  directories:
  - $HOME/.cache

env:
  global:
    - SETUP_PATH=.ci-local:.ci
    # for the sequencer on Windows
    - CHOCO=re2c

addons:
  apt:
    packages:
    # for all EPICS builds
    - libreadline6-dev
    - libncurses5-dev
    - perl
    # for clang compiler
    - clang
    # for mingw builds (32bit and 64bit)
    - g++-mingw-w64-i686
    - g++-mingw-w64-x86-64
    # for RTEMS cross builds
    - qemu-system-x86
  homebrew:
    packages:
    # for the sequencer
    - re2c
    update: true

install:
  - python .ci/cue.py prepare

script:
  - python .ci/cue.py build
  - python .ci/cue.py test
  - python .ci/cue.py test-results

# If you need to do more during install and build,
# add a local directory to your module and do e.g.
#  - ./.ci-local/travis/install-extras.sh

# Define build jobs

# Well-known variables to use
# SET         source setup file
# ADD_MODULES extra modules (for a specific job)
# BCFG        build configuration (static/debug/static-debug;
#             default: shared-optimized)
# TEST        set to NO to skip running the tests (default: YES)
# VV          set to make build scripts verbose (default: unset)
# EXTRA       content will be added to make command line
# EXTRA1..5   more additional arguments for the make command
#             (one argument per variable)

# Usually from setup files, but may be specified or overridden
#  on a job line
# MODULES     list of dependency modules
# BASE        branch or release tag name of the EPICS Base to use
# <MODULE>    branch or release tag for a specific module
# ...         see README for setup file syntax description

jobs:
  include:

# Different configurations of default gcc and clang

  - env: SET=base7

# Trusty: compiler versions very close to RHEL 7

  - env: SET=base7
    dist: trusty

# Cross-compilations to Windows using MinGW and WINE
    
  - env: SET=base7 WINE=32 TEST=NO BCFG=static

  - env: SET=base7 WINE=64 TEST=NO

# MacOS build

  - env: SET=base7
    os: osx
    compiler: clang

# Cross-compilation to RTEMS

  - env: SET=base7 RTEMS=4.10 ADD_MODULES=ipac

  - env: SET=base7 RTEMS=4.9 ADD_MODULES=ipac

# Native Windows builds with Visual Studio
  - env: SET=base7
    compiler: vs2017
    os: windows
  - env: SET=base7 BCFG=static
    compiler: vs2017
    os: windows
  - env: SET=base7 BCFG=debug
    compiler: vs2017
    os: windows
# static-debug is not yet working
#  - env: SET=base7 BCFG=static-debug
#    compiler: vs2017
#    os: windows

# Older Base releases
  - env: SET=base3-15

  - env: SET=base3-15 BCFG=static

# 3.14.12.2 build fails on newer distributions and doesn't know tapfiles target
  - env: SET=base3-14

  - env: SET=base3-14 BCFG=static

# "Libcom only" builds

  - env: SET=base7 LIBCOM_ONLY=YES

  - env: SET=base7 LIBCOM_ONLY=YES BCFG=static

# Other gcc versions (added as an extra package)

  - env: SET=base7
    compiler: gcc-6
    addons: { apt: { packages: ["g++-6"], sources: ["ubuntu-toolchain-r-test"] } }

  - env: SET=base7
    compiler: gcc-7
    addons: { apt: { packages: ["g++-7"], sources: ["ubuntu-toolchain-r-test"] } }
